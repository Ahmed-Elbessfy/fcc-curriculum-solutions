{"index.js":"// Functional Programming: Learn About Functional Programming\n// Functional programming is a style of programming where solutions are simple, isolated functions, without any side effects outside of the function scope.\n\n// INPUT -> PROCESS -> OUTPUT\n\n// Functional programming is about:\n\n// 1) Isolated functions - there is no dependence on the state of the program, which includes global variables that are subject to change\n\n// 2) Pure functions - the same input always gives the same output\n\n// 3) Functions with limited side effects - any changes, or mutations, to the state of the program outside the function are carefully controlled\n\n\n\n/**\n * A long process to prepare tea.\n * @return {string} A cup of tea.\n **/\nconst prepareTea = () => 'greenTea';\n\n/**\n * Get given number of cups of tea.\n * @param {number} numOfCups Number of required cups of tea.\n * @return {Array<string>} Given amount of tea cups.\n **/\nconst getTea = (numOfCups) => {\n  const teaCups = [];\n  \n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n\n  return teaCups;\n};\n\n// Add your code below this line\n\nconst tea4TeamFCC = getTea(40); // :(\n\n// Add your code above this line\n\nconsole.log(tea4TeamFCC);"}